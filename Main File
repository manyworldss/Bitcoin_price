 Standard library imports
import json
import logging
from datetime import datetime
import os

# Third-party imports
import requests
import discord
from discord.ext import tasks

# Set up logging system
# This creates a log file that will help you track what your program is doing
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    filename='bitcoin_tracker.log'
)

class BitcoinPriceTracker:
    """
    Main class for tracking Bitcoin prices and managing alerts
    """
    def __init__(self, api_key, price_alerts=None):
        # Store API key and initialize price alerts
        self.api_key = api_key
        self.price_alerts = price_alerts or {}
        # List to store historical price data
        self.price_history = []
        
    def get_bitcoin_price(self):
        """
        Your original function, modified to include logging and better error handling
        """
        headers = {
            'X-CMC_PRO_API_KEY': self.api_key,
            'Accept': 'application/json'
        }
        
        url = 'https://pro-api.coinmarketcap.com/v2/cryptocurrency/quotes/latest'
        parameters = {
            'symbol': 'BTC',
            'convert': 'USD'
        }
        
        try:
            # Log the API request attempt
            logging.info("Attempting to fetch Bitcoin price from CoinMarketCap")
            
            response = requests.get(url, headers=headers, params=parameters)
            response.raise_for_status()
            data = response.json()
            
            bitcoin_data = data['data']['BTC'][0]
            quote = bitcoin_data['quote']['USD']
            
            # Log successful price fetch
            logging.info(f"Successfully fetched Bitcoin price: ${quote['price']:,.2f}")
            
            return {
                'name': bitcoin_data['name'],
                'symbol': bitcoin_data['symbol'],
                'price_usd': quote['price'],
                'market_cap': quote['market_cap'],
                'volume_24h': quote['volume_24h'],
                'percent_change_24h': quote['percent_change_24h'],
                'last_updated': quote['last_updated']
            }
            
        except requests.exceptions.RequestException as e:
            # Log any API request errors
            logging.error(f"Error fetching data from CoinMarketCap: {e}")
            return None
        except KeyError as e:
            # Log any issues with parsing the API response
            logging.error(f"Error parsing API response: {e}")
            return None

    def check_price_alerts(self, current_price):
        """
        Check if any price alerts should be triggered
        """
        alerts = []
        # Check if price crosses above threshold
        if 'above' in self.price_alerts and current_price > self.price_alerts['above']:
            alert_msg = f"Bitcoin price is above ${self.price_alerts['above']:,}!"
            alerts.append(alert_msg)
            logging.info(f"Price alert triggered: {alert_msg}")
            
        # Check if price crosses below threshold
        if 'below' in self.price_alerts and current_price < self.price_alerts['below']:
            alert_msg = f"Bitcoin price is below ${self.price_alerts['below']:,}!"
            alerts.append(alert_msg)
            logging.info(f"Price alert triggered: {alert_msg}")
            
        return alerts

    def save_price_history(self, filename='price_history.json'):
        """
        Save price history to a JSON file
        """
        try:
            with open(filename, 'w') as f:
                json.dump(self.price_history, f)
            logging.info(f"Successfully saved price history to {filename}")
        except Exception as e:
            logging.error(f"Error saving price history: {e}")

class BitcoinBot(discord.Client):
    """
    Discord bot for sending Bitcoin price updates and alerts
    """
    def __init__(self, tracker, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.tracker = tracker
        # Start the price checking loop when bot initializes
        self.price_check.start()

    async def on_ready(self):
        """Called when the bot successfully connects to Discord"""
        logging.info(f'{self.user} has connected to Discord!')
        print(f'{self.user} is ready to send Bitcoin updates!')

    @tasks.loop(minutes=60)  # Check price every hour
    async def price_check(self):
        """
        Periodic task to check Bitcoin price and send updates
        """
        try:
            bitcoin_data = self.tracker.get_bitcoin_price()
            if bitcoin_data:
                # Store price history
                self.tracker.price_history.append({
                    'timestamp': datetime.now().isoformat(),
                    'price': bitcoin_data['price_usd']
                })
                
                # Save updated history to file
                self.tracker.save_price_history()
                
                # Check for price alerts
                alerts = self.tracker.check_price_alerts(bitcoin_data['price_usd'])
                
                # Send updates to appropriate Discord channels
                for channel in self.get_all_channels():
                    if channel.name == 'bitcoin-alerts':  # Only send to specific channels
                        # Format and send current price update
                        price_message = (
                            f"ðŸ”µ **Bitcoin Update**\n"
                            f"Price: ${bitcoin_data['price_usd']:,.2f}\n"
                            f"24h Change: {bitcoin_data['percent_change_24h']:.2f}%\n"
                            f"Last Updated: {bitcoin_data['last_updated']}"
                        )
                        await channel.send(price_message)
                        
                        # Send any triggered alerts
                        for alert in alerts:
                            await channel.send(f"ðŸš¨ **ALERT**: {alert}")
                            
        except Exception as e:
            logging.error(f"Error in price check loop: {e}")

def load_config(filename='config.json'):
    """
    Load configuration from JSON file
    """
    try:
        with open(filename, 'r') as f:
            config = json.load(f)
        logging.info("Successfully loaded configuration")
        return config
    except FileNotFoundError:
        logging.error(f"Config file '{filename}' not found!")
        return None
    except json.JSONDecodeError:
        logging.error(f"Invalid JSON in config file '{filename}'!")
        return None

# Main execution
if __name__ == "__main__":
    # Load configuration
    config = load_config()
    if not config:
        logging.error("Failed to load configuration. Exiting.")
        exit(1)
    
    # Initialize tracker and bot
    tracker = BitcoinPriceTracker(
        api_key=config['cmc_api_key'],
        price_alerts=config.get('price_alerts')
    )
    
    # Create and run Discord bot
    bot = BitcoinBot(tracker)
